/**
 * The dev middleware is modified based on
 * https://github.com/webpack/webpack-dev-middleware
 *
 * MIT Licensed
 * Copyright JS Foundation and other contributors
 * https://github.com/webpack/webpack-dev-middleware/blob/master/LICENSE
 */
import type { Stats as FSStats, ReadStream } from 'node:fs';
import type { ServerResponse as NodeServerResponse } from 'node:http';
import type { Compiler, Configuration, MultiCompiler, MultiStats, Stats, Watching } from '@rspack/core';
import type { RequestHandler } from '../types';
export type ServerResponse = NodeServerResponse & {
    locals?: {
        webpack?: {
            devMiddleware?: Context;
        };
    };
};
export type MultiWatching = ReturnType<MultiCompiler['watch']>;
export type OutputFileSystem = {
    createReadStream?: (p: string, opts: {
        start: number;
        end: number;
    }) => ReadStream;
    statSync?: (p: string) => FSStats;
    lstat?: (p: string) => unknown;
    readFileSync?: (p: string) => Buffer;
};
export type Callback = (stats?: Stats | MultiStats) => void;
export type Options = {
    writeToDisk?: boolean | ((targetPath: string, compilationName?: string) => boolean);
    publicPath?: NonNullable<Configuration['output']>['publicPath'];
};
export type Context = {
    state: boolean;
    stats: Stats | MultiStats | undefined;
    callbacks: Callback[];
    options: Options;
    compilers: Compiler[];
    watching: Watching | MultiWatching | undefined;
    outputFileSystem: OutputFileSystem;
};
export type FilledContext = Omit<Context, 'watching'> & {
    watching: Watching | MultiWatching;
};
export type Close = (callback: (err: Error | null | undefined) => void) => void;
export type API = RequestHandler & {
    watch: () => void;
    close: Close;
};
export type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<T>;
export declare function devMiddleware(compiler: Compiler | MultiCompiler, options?: Options): Promise<API>;
